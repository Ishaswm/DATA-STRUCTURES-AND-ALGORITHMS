import java.util.*;
public class bipartitegraph {
    static class Edge {
        int src;
        int dest;
        int wt;

        public Edge(int s, int d, int w){
            this.src=s;
            this.dest=d;
            this.wt=w;
        }
    }
    public static void createGraph(ArrayList<Edge>[] graph){
        for (int i=0; i<graph.length; i++){
            graph[i] = new ArrayList<>();
        }
        graph[0].add(new Edge(0, 1, 1));
        graph[0].add(new Edge(0, 2, 1));
        graph[1].add(new Edge(1, 3, 1));
        graph[1].add(new Edge(1, 0, 1));
        graph[3].add(new Edge(3, 1, 1));
        graph[3].add(new Edge(3, 2, 1));
        graph[2].add(new Edge(2, 3, 1));
        graph[2].add(new Edge(2, 0, 1));
    }

    public static boolean isBipartite(ArrayList<Edge>[] graph){
        int color[] = new int[graph.length];
        for (int i=0; i<color.length; i++){
            color[i] = -1;

        }
        Queue<Integer> q = new LinkedList<>();

        for (int i=0; i<graph.length; i++){
            if (color[i] == -1){
                 // assign color with bfs
                 q.add(i); // fist (src node) put in queue
                 color[i] = 0;
                 while (!q.isEmpty()) {
                    int curr = q.remove();
                    // check its neighbors
                    for (int j=0; j<graph[curr].size(); j++){
                        Edge e = graph[curr].get(j); // e.dest
                        
                        if (color[e.dest] == -1){
                            int nextColor = color[curr] == 0 ? 1: 0; // ternary operator
                            color[e.dest] = nextColor;
                            q.add(e.dest); 

                        } else if (color[e.dest] == color[curr]) { // NOT bipartite
                            return false;
                        }

                    }
                 }

            }
            
        }
        return true; // if false isn't returned
    }
    public static void main(String[] args) {
        int V = 5;
        ArrayList<Edge>[] graph = new ArrayList[V];
        createGraph(graph);
        System.out.println(isBipartite(graph));
    }
}
